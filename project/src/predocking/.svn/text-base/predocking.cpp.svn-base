/*
 * predocking.cpp
 *
 *  Created on: Nov 4, 2009
 *      Author: ivan
 */

#include "predocking.h"


Predocking::Predocking()
{
	// load defaults
    protein_ = NULL;

	centerAtoms_ = 0;
	gridSize_ = 60;
	gridCellSize_ = 1;

	inner_.setGridSize(gridSize_, gridCellSize_);
	outer_.setGridSize(gridSize_, gridCellSize_);

	radiiPath_ = "data/atmtypenumbers";
	delta_ = 1;
	microDelta_ = 0.2;
	innerRadius_ = -1.6;
	outerRadius_ = 1.4;
}

Predocking::Predocking(Configuration &config, LoadFrom source)
{
    protein_ = NULL;
	loadConfig(config, source);
}

Predocking::~Predocking()
{
	if (protein_ != NULL) delete protein_;
}


void Predocking::loadConfig(Configuration &config, LoadFrom source)
{
	if (source != CALCULATE)
	{
		fprintf(stderr, "Loading coefficients from file\n");

		string t1, t2;

		if (source == FILE_LIGAND)
		{
			config.getParameter("ligand_inner_skin_coeffs", t1);
			config.getParameter("ligand_outer_skin_coeffs", t2);
		}else
		{
			config.getParameter("receptor_inner_skin_coeffs", t1);
			config.getParameter("receptor_outer_skin_coeffs", t2);
		}

		protein_ = new Protein(t1, t2);

		return;
	}

	int centerParam = 0;
	config.getParameter("center", centerParam);
	centerAtoms_ = centerParam;
	config.getParameter("radii_path", radiiPath_);

	config.getParameter("stranica_grida", gridSize_);
	config.getParameter("stranica_celije", gridCellSize_);

	inner_.setGridSize(gridSize_, gridCellSize_);
	outer_.setGridSize(gridSize_, gridCellSize_);

	config.getParameter("microdelta", microDelta_);
	config.getParameter("delta", delta_);
	config.getParameter("inner_radius", innerRadius_);
	config.getParameter("outer_radius", outerRadius_);
}

void Predocking::parsePDB(const char *sourcePath, const char *destinationPath)
{
	pdbFile_.Init(sourcePath);

	if (!pdbFile_.LoadAtmtypenumbers(radiiPath_.c_str()))
	{
		exit(1);
	}

	pdbFile_.UseUnitedRadius();

//	pdbFile.Import(centerAtoms_);
	if (centerAtoms_ == 1)
	{
		pdbFile_.centerAtomsByMass();
		pdbFile_.Import(true);
	}
	else if (centerAtoms_ == 2)
	{
		pdbFile_.centerAtomsArithmetically();
		pdbFile_.Import(true);
	}
	else
	{
		pdbFile_.Import(false);
	}

	if (!pdbFile_.SaveCoords(destinationPath))
	{
		exit(1);
	}
}

void Predocking::getProtein(int order, Protein& protein)
{
	if (protein_ != NULL)
	{
		if (order == -1)
		{
			order = protein_->getOrder();
		}
		if (protein_->getOrder() != order)
		{
			fprintf(stderr, "Wrong order loaded from file (loaded %d, requested %d)\n", protein_->getOrder(), order);
			exit(1);
		}

		protein = (*protein_);

        return;
	}

	if (inner_.size() == 0 || outer_.size() == 0)
	{
		fprintf(stderr, "Skins not initialized\n");
		exit(1);
	}

	protein.setOrder(order);

	protein.inner_.calculateFromGrid(inner_);
	protein.outer_.calculateFromGrid(outer_);
}

void Predocking::calculateSkins(const string& PDBFilePath)
{
	if (protein_ != NULL) return;

//	MSMSWrapper msms;

	fprintf(stderr, "Parsing PDB from %s...\n", PDBFilePath.c_str());

	char parsedFilename[] = ".tmpParsed";
	parsePDB(PDBFilePath.c_str(), parsedFilename);

	msms_.init();
	msms_.load(parsedFilename);

	remove(parsedFilename);

	// inner skin calculation
	fprintf(stderr, "Generating inner skin...\n");
	inner_.generateSurfaceGrid(msms_, microDelta_, delta_, innerRadius_);

	// outer skin calculation
	fprintf(stderr, "Generating outer skin...\n");
	outer_.generateSurfaceGrid(msms_, microDelta_, delta_, outerRadius_);
}

void Predocking::calculateSkinsWithouthParsing()
{
	if (protein_ != NULL) return;

	// inner skin calculation
	fprintf(stderr, "Generating inner skin...\n");
	inner_.generateSurfaceGrid(msms_, microDelta_, delta_, innerRadius_);

/*
	Grid inflatedInner;
	string pathInner;
	pathInner = pdbFile_.getFileName();
	pathInner += "_inner.igrid";
	inflatedInner = inner_;
	inflatedInner.inflateGrid();
	inflatedInner.exportToFile(pathInner);
*/

	// outer skin calculation
	fprintf(stderr, "Generating outer skin...\n");
	outer_.generateSurfaceGrid(msms_, microDelta_, delta_, outerRadius_);

/*
	Grid inflatedOuter;
	string pathOuter;
	pathOuter = pdbFile_.getFileName();
	pathOuter += "_outer.igrid";
	inflatedOuter = outer_;
	inflatedOuter.inflateGrid();
	inflatedOuter.exportToFile(pathOuter);
*/
}

void Predocking::calculateSurface(const string& PDBFilePath, const char *parsedPdbPath)
{
	fprintf(stderr, "Calculating surface from %s...\n", PDBFilePath.c_str());

	if (!pdbFile_.SaveCoords(parsedPdbPath))
	{
		exit(1);
	}

	msms_.init();
	msms_.load(parsedPdbPath);
}

PdbFile& Predocking::getPdbFile()
{
	return pdbFile_;
}



/*
void Predocking::runPredocking(Configuration &config)
{
	int order=0, centerParam=0;
	double gridSize=0.0f, gridCellSize=0.0f;
	double microDelta=0.0f, delta=0.0f, innerRadius=0.0f, outerRadius=0.0f;
	string ligandPath, parsedLigandPath, radiiPath, receptorPath, parsedReceptorPath;
	string ligandInnerSkinPath, ligandOuterSkinPath, receptorInnerSkinPath, receptorOuterSkinPath;
	string ligandInflatedInnerPath, ligandInflatedOuterPath, receptorInflatedInnerPath, receptorInflatedOuterPath;
	string ligandInnerSkinCoeffPath, ligandOuterSkinCoeffPath, receptorInnerSkinCoeffPath, receptorOuterSkinCoeffPath;
	PdbFile ligand, receptor;
	MSMSWrapper wrapperLigand, wrapperReceptor;
	Coefficients coeffLigandInner, coeffLigandOuter, coeffReceptorInner, coeffReceptorOuter;

	config.getParameter("stranica_grida", gridSize);
	config.getParameter("stranica_celije", gridCellSize);

	Grid skinLigandInner(gridSize, gridCellSize), skinLigandOuter(gridSize, gridCellSize), skinReceptorInner(gridSize, gridCellSize), skinReceptorOuter(gridSize, gridCellSize);
	Grid inflatedSkinLigandInner(gridSize, gridCellSize), inflatedSkinLigandOuter(gridSize, gridCellSize), inflatedSkinReceptorInner(gridSize, gridCellSize), inflatedSkinReceptorOuter(gridSize, gridCellSize);

///////////////////////////////////////////////////////
////////////// PARSING PDB FILES //////////////////////
///////////////////////////////////////////////////////
	centerAtoms_ = 0;
	if (config.getParameter("center", centerParam) == 0)
	{
		if (centerParam == 0)
			centerAtoms_ = false;
		else
			centerAtoms_ = true;
	}

	config.getParameter("ligand", ligandPath);
	config.getParameter("parsed_ligand", parsedLigandPath);

	printf ("Loading ligand %s...", ligandPath.c_str());
	if ((parsePDB(&ligand, (char *) ligandPath.c_str(), (char *) parsedLigandPath.c_str(), (char *) radiiPath.c_str())))
		printf ("success!\n");
	else
		printf ("FAILED!\n");

	config.getParameter("receptor", receptorPath);
	config.getParameter("parsed_receptor", parsedReceptorPath);
	config.getParameter("radii_path", radiiPath);
	printf ("Loading receptor %s...", receptorPath.c_str());
	if ((parsePDB(&receptor, (char *) receptorPath.c_str(), (char *) parsedReceptorPath.c_str(), (char *) radiiPath.c_str())))
		printf ("success!\n");
	else
		printf ("FAILED!\n");

///////////////////////////////////////////////////////
////////////// MOLECULAR SURFACE //////////////////////
///////////////////////////////////////////////////////

	printf ("Molecular surface...\n");
	config.getParameter("parsed_ligand", parsedLigandPath);
	config.getParameter("parsed_receptor", parsedReceptorPath);
	getMolecularSurface(&wrapperLigand, parsedLigandPath);
	getMolecularSurface(&wrapperReceptor, parsedReceptorPath);

//	wrapperLigand.init();
//	wrapperReceptor.init();
//	wrapperLigand.load((char *) t1.c_str());
//	wrapperReceptor.load((char *) t2.c_str());
	printf ("...OK.\n");

///////////////////////////////////////////////////////
////////////// SKIN GRID //////////////////////////////
///////////////////////////////////////////////////////
	config.getParameter("microdelta", microDelta);
	config.getParameter("delta", delta);
	config.getParameter("inner_radius", innerRadius);
	config.getParameter("outer_radius", outerRadius);

	printf ("Generating skins - ligand...\n");
	config.getParameter("ligand_inner_skin", ligandInnerSkinPath);
	config.getParameter("ligand_outer_skin", ligandOuterSkinPath);
	getSurfaceSkin(&skinLigandInner, &wrapperLigand, microDelta, delta, innerRadius, ligandInnerSkinPath);
	getSurfaceSkin(&skinLigandOuter, &wrapperLigand, microDelta, delta, outerRadius, ligandOuterSkinPath);

//	skinLigandInner.generateSurfaceGrid(wrapperLigand, microDelta, delta, innerRadius);
//	skinLigandInner.exportToFile(ligandInnerSkinPath);
//	skinLigandOuter.generateSurfaceGrid(wrapperLigand, microDelta, delta, outerRadius);
//	skinLigandOuter.exportToFile(ligandOuterSkinPath);
	printf ("...OK.\n");

	printf ("Generating skins - receptor...\n");
	config.getParameter("receptor_inner_skin", receptorInnerSkinPath);
	config.getParameter("receptor_outer_skin", receptorOuterSkinPath);
	getSurfaceSkin(&skinReceptorInner, &wrapperReceptor, microDelta, delta, innerRadius, receptorInnerSkinPath);
	getSurfaceSkin(&skinReceptorOuter, &wrapperReceptor, microDelta, delta, outerRadius, receptorOuterSkinPath);

//	skinReceptorInner.generateSurfaceGrid(wrapperReceptor, microDelta, delta, innerRadius);
//	skinReceptorInner.exportToFile(receptorInnerSkinPath);
//	skinReceptorOuter.generateSurfaceGrid(wrapperReceptor, microDelta, delta, outerRadius);
//	skinReceptorOuter.exportToFile(receptorOuterSkinPath);
	printf ("...OK.\n");





	inflatedSkinLigandInner = skinLigandInner;
	inflatedSkinLigandOuter = skinLigandOuter;
	inflatedSkinReceptorInner = skinReceptorInner;
	inflatedSkinReceptorOuter = skinReceptorOuter;

	config.getParameter("ligand_inflated_inner_skin", ligandInflatedInnerPath);
	config.getParameter("ligand_inflated_outer_skin", ligandInflatedOuterPath);
	inflatedSkinLigandInner.inflateGrid();
	inflatedSkinLigandInner.exportToFile(ligandInflatedInnerPath);
	inflatedSkinLigandOuter.inflateGrid();
	inflatedSkinLigandOuter.exportToFile(ligandInflatedOuterPath);

	config.getParameter("receptor_inflated_inner_skin", receptorInflatedInnerPath);
	config.getParameter("receptor_inflated_outer_skin", receptorInflatedOuterPath);
	inflatedSkinReceptorInner.inflateGrid();
	inflatedSkinReceptorInner.exportToFile(receptorInflatedInnerPath);
	inflatedSkinReceptorOuter.inflateGrid();
	inflatedSkinReceptorOuter.exportToFile(receptorInflatedOuterPath);

///////////////////////////////////////////////////////
////////////// CALCULATING COEFFICIENTS ///////////////
///////////////////////////////////////////////////////
	config.getParameter("red_sf_harmonika", order);

	printf ("Calculating coefficients - ligand inner...\n");
	config.getParameter("ligand_inner_skin_coeffs", ligandInnerSkinCoeffPath);
	getCoefficients(&coeffLigandInner, &skinLigandInner, order, ligandInnerSkinCoeffPath);
//	coeffLigandInner.init(order);
//	coeffLigandInner.calculateFromGrid(skinLigandInner);
//	coeffLigandInner.exportToFile(ligandInnerSkinCoeffPath);
	printf ("...OK.\n");
	printf ("Calculating coefficients - ligand outer...\n");
	config.getParameter("ligand_outer_skin_coeffs", ligandOuterSkinCoeffPath);
	getCoefficients(&coeffLigandOuter, &skinLigandOuter, order, ligandOuterSkinCoeffPath);
//	coeffLigandOuter.init(order);
//	coeffLigandOuter.calculateFromGrid(skinLigandOuter);
//	coeffLigandOuter.exportToFile(ligandOuterSkinCoeffPath);
	printf ("...OK.\n");

	printf ("Calculating coefficients - Receptor inner...\n");
	config.getParameter("receptor_inner_skin_coeffs", receptorInnerSkinCoeffPath);
	getCoefficients(&coeffReceptorInner, &skinReceptorInner, order, receptorInnerSkinCoeffPath);
//	coeffReceptorInner.init(order);
//	coeffReceptorInner.calculateFromGrid(skinReceptorInner);
//	coeffReceptorInner.exportToFile(receptorInnerSkinCoeffPath);
	printf ("...OK.\n");
	printf ("Calculating coefficients - Receptor outer...\n");
	config.getParameter("receptor_outer_skin_coeffs", receptorOuterSkinCoeffPath);
	getCoefficients(&coeffReceptorOuter, &skinReceptorOuter, order, receptorOuterSkinCoeffPath);
//	coeffReceptorOuter.init(order);
//	coeffReceptorOuter.calculateFromGrid(skinReceptorOuter);
//	coeffReceptorOuter.exportToFile(receptorOuterSkinCoeffPath);
	printf ("...OK.\n");

	printf ("\nFinished predocking!\n");

}*/

