// generated by Fast Light User Interface Designer (fluid) version 1.0110

#ifndef vmolgui_h
#define vmolgui_h

#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Gl_Window.H>
#include <FL/Fl_Input_Choice.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Hold_Browser.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Text_Display.H>
#include <FL/Fl_File_Chooser.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Tree.H>
#include <FL/Fl_Menu_Bar.H>
// #include "../Fl_Tree/FL/Fl_Tree.H"
#include <vector>
#include "glwindow.h"
#include "textcommandinput.h"
#include "textinput.h"
#include "../docking/docking.h"
#include "../log/log.h"




/*
extern Fl_Double_Window *vmolMainWindow;
extern Fl_Gl_Window *oglBox[4];
extern Fl_Tabs *tabMenu;
extern Fl_Tabs *tabDisplay;
extern Fl_Tabs *tabOptions;
extern Fl_Tabs *tabInfo;
extern Fl_Tabs *tabPDT;
*/

#define NUM_OPENGL_BOXES 4

class ControlPosition
{
public:
	int x, y, width, height;

	ControlPosition()
	{
		x = y = width = height = 0.0f;
	}
};

class VmolGui
{
public:
	VmolGui();
	~VmolGui();

	void init();
	bool createGui();
	static VmolGui* getInstance();
	void changeBoxNumber(int setting);
	void changeBoxNumberAndResize(int setting);
	void setControlPositions();
	void drawOpenGLBoxes();
	void drawViews(std::vector<VmolView *> &viewList);

	int getOglBoxSetting();
	std::vector<ControlPosition>& getOglBoxPosition();
	std::vector<VmolView *>& getOglBox();

	Fl_Choice* getOptionsView();

	unsigned long int getMacroStart();
	void setMacroStart(unsigned long int macroStart);
	unsigned long int getMacroEnd();
	void setMacroEnd(unsigned long int macroEnd);



	Fl_Double_Window *mainWindow;
	std::vector<VmolView *> oglBox_;
	int oglBoxSetting_;

//	PdbFile *globalLigand=NULL;
//	PdbFile *globalReceptor=NULL;

	void refreshGui();

	void refreshScore();

private:
	static VmolGui* singleInstance_;

/*
	Fl_Tabs *tabMenu_;
	Fl_Tabs *tabDisplay_;
	Fl_Tabs *tabOptions_;
	Fl_Tabs *tabInfo_;
	Fl_Tabs *tabPDT_;
*/

	std::vector<Fl_Tabs *> tabList_;
	std::vector<Fl_Group *> groupList_;

	ControlPosition windowPosition_;
	ControlPosition tabMenuPosition_;
	ControlPosition commandInputPosition_;
	std::vector<ControlPosition> oglBoxPosition_;

	void setupTabs();
	void setupTabDisplay();
	void setupTabOptions();
	void setupTabNodes();
	void setupTabVariables();
	void setupTabInfo();
	void setupTabPDT();
	void setupMenus();

	double tabGridX(unsigned int index);
	double tabGridY(unsigned int index);

	int handleViewMouse(VmolView *view);
	int handleViewMouseChangeScalarVariable(void *variable, unsigned long long int &variableType, double x, double y, double z, double w);
	int handleViewMouseChangeVectorVariable(void *variable, unsigned long long int &variableType, double x, double y, double z, double w);



	static void callbackOptionsMouseBinds(Fl_Widget *w, void *data);
	static void callbackOptionsMouseButton(Fl_Widget *w, void *data);
	static void callbackOptionsMouseAction(Fl_Widget *w, void *data);
	static void callbackOptionsView(Fl_Widget *w, void *data);
	static void callbackOptionsChange(Fl_Widget *w, void *data);
	static void callbackOptionsRunScript(Fl_Widget *w, void *data);
	static void callbackOptionsExportWorkspace(Fl_Widget *w, void *data);
//	static void callbackOptionsExportWorkspaceDialogCallback(Fl_File_Chooser *w, void *data);

	static void callbackVariablesScalar(Fl_Widget *w, void *data);
	static void callbackVariablesChangeScalar(Fl_Widget *w, void *data);
	static void callbackVariablesCreateScalar(Fl_Widget *w, void *data);
	static void callbackVariablesRemoveScalar(Fl_Widget *w, void *data);
	static void callbackVariablesMesh(Fl_Widget *w, void *data);
	static void callbackVariablesChangeMesh(Fl_Widget *w, void *data);
	static void callbackVariablesCreateMesh(Fl_Widget *w, void *data);
	static void callbackVariablesRemoveMesh(Fl_Widget *w, void *data);
	static void callbackVariablesPdb(Fl_Widget *w, void *data);
	static void callbackVariablesChangePdb(Fl_Widget *w, void *data);
	static void callbackVariablesCreatePdb(Fl_Widget *w, void *data);
	static void callbackVariablesRemovePdb(Fl_Widget *w, void *data);
	static void callbackVariablesPdbCreateMs(Fl_Widget *w, void *data);
	static void callbackVariablesPdbPathPick(Fl_Widget *w, void *data);
	static void callbackVariablesMeshPathPick(Fl_Widget *w, void *data);

	static void callbackDisplayViewList(Fl_Widget *w, void *data);
	static void callbackDisplayChange(Fl_Widget *w, void *data);
	static void callbackDisplayCreate(Fl_Widget *w, void *data);
	static void callbackDisplayRemove(Fl_Widget *w, void *data);

	static void callbackPdtConfigPathPick(Fl_Widget *w, void *data);
	static void callbackPdtPredocking(Fl_Widget *w, void *data);
	static void callbackPdtDocking(Fl_Widget *w, void *data);
	static void callbackPdtLocalToGlobal(Fl_Widget *w, void *data);
	static void callbackPdtEvaluateScores(Fl_Widget *w, void *data);
	static void callbackPdtEvaluationPathPick(Fl_Widget *w, void *data);
	static void callbackPdtLoadProteinCoefficients(Fl_Widget *w, void *data);
	static void callbackPdtLoadScoresFile(Fl_Widget *w, void *data);
	static void callbackPdtCalculateCoefficients(Fl_Widget *w, void *data);
	static void callbackPdtScoreConformation(Fl_Widget *w, void *data);
	static void callbackPdtPickOutputPdbPath(Fl_Widget *w, void *data);
	static void callbackPdtGeneratePdb(Fl_Widget *w, void *data);

	static void callbackNodesNodeTree(Fl_Widget *w, void *data);
	static void callbackNodesType(Fl_Widget *w, void *data);
	static void callbackNodesCreate(Fl_Widget *w, void *data);
	static void callbackNodesChange(Fl_Widget *w, void *data);
	static void callbackNodesRemove(Fl_Widget *w, void *data);
	static void callbackNodesOptionsNodeMode(Fl_Widget *w, void *data);
	static void callbackNodesChecksNodeMode(Fl_Widget *w, void *data);
	static void callbackNodesModeModelSet(Fl_Widget *w, void *data);
	static void callbackNodesModeModelNone(Fl_Widget *w, void *data);
	static void callbackNodesModeModelAll(Fl_Widget *w, void *data);
	static void callbackNodesModeModelNext(Fl_Widget *w, void *data);
	static void callbackNodesModeModelPrevious(Fl_Widget *w, void *data);

	static void callbackMenuFileImportPdb(Fl_Widget *w, void *data);
	static void callbackMenuFileImportMeshDat(Fl_Widget *w, void *data);
	static void callbackMenuFileImportMeshGrid(Fl_Widget *w, void *data);
	static void callbackMenuFileImportMeshMs(Fl_Widget *w, void *data);
	static void callbackMenuFileImportScript(Fl_Widget *w, void *data);
	static void callbackMenuFileExportWorkspace(Fl_Widget *w, void *data);
	static void callbackMenuExit(Fl_Widget *w, void *data);
	static void callbackMenuEditHelpAbout(Fl_Widget *w, void *data);
	static void callbackMenuHelpHelp(Fl_Widget *w, void *data);
	static void callbackMenuEditSetDefaultWorkspace(Fl_Widget *w, void *data);
	static void callbackMenuToolsStartRecordingMacro(Fl_Widget *w, void *data);
	static void callbackMenuToolsStopRecordingMacro(Fl_Widget *w, void *data);



	void refreshGuiNodeTreeRecursion(VmolSceneNode *currentNode, std::string currentLocation);
	void menuLoadMesh(std::string type, std::string path);




///// CONTROLS FOR DISPLAY TAB /////
	TextInput *displayName_;
//	TextInput *displayRootNode_;
	TextInput *displayBackgroundColor_;
	Fl_Hold_Browser *displayViewList_;
	Fl_Button *displayCreate_;
	Fl_Button *displayChange_;
	Fl_Button *displayRemove_;
//	Fl_Button *displayPickNode_;
	Fl_Choice *displayRootNode_;
////////////////////////////////////
///// CONTROLS FOR OPTIONS TAB /////
	Fl_Text_Buffer *optionsConsoleTextBuffer_;
	Fl_Text_Display *optionsConsole_;
	unsigned long int optionsNumConsoleLines_;
	Fl_Button *optionsRunScript_;
	Fl_Button *optionsExportWorkspace_;
	TextInput *optionsMouseSensitivityX_;
	TextInput *optionsMouseSensitivityY_;
	TextInput *optionsShortcut1_;
	TextInput *optionsShortcut2_;
	Fl_Button *optionsChange_;
	Fl_Choice *optionsView_;
	Fl_Choice *optionsMouseButton_;
	Fl_Choice *optionsMouseAction_;
	Fl_Choice *optionsMouseBinds_;
////////////////////////////////////
//// CONTROLS FOR VARIABLES TAB ////
	Fl_Hold_Browser *variablesScalar_;
	Fl_Hold_Browser *variablesMesh_;
	Fl_Hold_Browser *variablesPdb_;
	TextInput *variablesScalarName_;
	Fl_Choice *variablesScalarType_;
	TextInput *variablesValueX_;
	TextInput *variablesValueY_;
	TextInput *variablesValueZ_;
	TextInput *variablesValueW_;
	Fl_Button *variablesChangeScalar_;
	Fl_Button *variablesCreateScalar_;
	Fl_Button *variablesRemoveScalar_;

	TextInput *variablesPdbName_;
	TextInput *variablesPdbPath_;
	Fl_Button *variablesPdbPathPick_;
	TextInput *variablesPdbRadiusPath_;
	Fl_Choice *variablesPdbRadiusType_;
	Fl_Choice *variablesPdbCenter_;
	Fl_Choice *variablesPdbCenterType_;
	Fl_Button *variablesChangePdb_;
	Fl_Button *variablesCreatePdb_;
	Fl_Button *variablesRemovePdb_;
	Fl_Choice *variablesPdbAssignNode_;
	Fl_Choice *variablesPdbNodeMode_;
	Fl_Choice *variablesPdbSphereMesh_;
	Fl_Choice *variablesPdbStickMesh_;
	Fl_Button *variablesPdbCreateMs_;

	TextInput *variablesMeshName_;
	TextInput *variablesMeshPath_;
	Fl_Button *variablesMeshPathPick_;
	Fl_Choice *variablesMeshType_;
	TextInput *variablesMeshAutoscale_;
	Fl_Choice *variablesMeshCenter_;
	Fl_Button *variablesChangeMesh_;
	Fl_Button *variablesCreateMesh_;
	Fl_Button *variablesRemoveMesh_;
	Fl_Choice *variablesMeshAutoIsovalue_;
	TextInput *variablesMeshIsovalue_;
	Fl_Choice *variablesMeshAssignNode_;
	Fl_Choice *variablesMeshNodeMode_;

//	TextInput *variablesScalarType_;
////////////////////////////////////
////// CONTROLS FOR NODES TAB //////
	Fl_Tree *nodesNodeTree_;
	TextInput *nodesName_;
	Fl_Choice *nodesType_;
	Fl_Choice *nodesParent_;
	Fl_Choice *nodesParameter1_;
	Fl_Choice *nodesParameter2_;
	Fl_Choice *nodesParameter3_;
	Fl_Choice *nodesParameter4_;
	Fl_Button *nodesChangeNode_;
	Fl_Button *nodesCreateNode_;
	Fl_Button *nodesRemoveNode_;

	Fl_Choice *nodesOptionsNodeMode_;
	Fl_Check_Button *nodesModeGeometry_;
	Fl_Check_Button *nodesModeColors_;
	Fl_Check_Button *nodesModeNormals_;
	Fl_Check_Button *nodesModeTextureCoords_;

	Fl_Check_Button *nodesModeTextures_;
	Fl_Check_Button *nodesModeLighting_;
	Fl_Check_Button *nodesModeWireframe_;
	Fl_Check_Button *nodesModeTransparent_;

	Fl_Check_Button *nodesModeCallote_;
	Fl_Check_Button *nodesModeSticks_;
	Fl_Check_Button *nodesModeSticksBalls_;
	Fl_Check_Button *nodesModeWire_;

	Fl_Check_Button *nodesModeColorAtom_;
	Fl_Check_Button *nodesModeColorAmino_;
	Fl_Check_Button *nodesModeColorChain_;
	Fl_Check_Button *nodesModeColorUndefined1_;

	Fl_Check_Button *nodesModeObjectCenter_;
	Fl_Check_Button *nodesModeObjectBounds_;
	Fl_Check_Button *nodesModeObjectUndefined_;
	Fl_Check_Button *nodesModeUseDefault_;

	TextInput *nodesModeModel_;
	Fl_Button *nodesModeModelSet_;
	Fl_Button *nodesModeModelNone_;
	Fl_Button *nodesModeModelAll_;
	Fl_Button *nodesModeModelNext_;
	Fl_Button *nodesModeModelPrevious_;

//	Fl_Tree *nodesNodeList1_;

////////////////////////////////////
///// CONTROLS FOR PDT TAB /////////
	Fl_Choice *pdtActiveReceptor_;
	Fl_Choice *pdtReceptorRotation_;
	Fl_Choice *pdtActiveLigand_;
	Fl_Choice *pdtLigandRotation_;
	Fl_Choice *pdtLigandTranslation_;
	Fl_Choice *pdtCorrectComplex_;
	TextInput *pdtGridSize_;
	TextInput *pdtGridCellSize_;
//	Fl_Button *pdtCalculateCoeffs_;
	Fl_Box *pdtCurrentScore_;
	Fl_Check_Button *pdtAutomaticScoring_;
	Fl_Button *pdtScoreConformation_;
	Fl_Button *pdtLocalToGlobal_;
	TextInput *pdtConfigPath_;
	Fl_Button *pdtPickConfigFile_;
	Fl_Button *pdtRunPredocking_;
	Fl_Button *pdtRunDocking_;
	Fl_Button *pdtEvaluateScores_;
	Fl_Button *pdtLoadProteinCoefficients_;
	Fl_Button *pdtLoadScoresFile_;
	TextInput *pdtStartingScore_;
	TextInput *pdtNumberOfScores_;
	TextInput *pdtEvaluationPath_;
	Fl_Button *pdtPickEvaluationPath_;
	TextInput *pdtOutputPdbPath_;
	Fl_Button *pdtPickOutputPdbPath_;
	Fl_Button *pdtGenerateOutputPdb_;
//	Fl_Button *pdtLoadPdbOutputFile_;
	std::string currentScore_;





	unsigned long int macroStart_;
	unsigned long int macroEnd_;

	Docking *docking_;
	PdbFile ligandCopy_;
	PdbFile receptorCopy_;
	PdbFile complexCopy_;
	bool proteinCopySet_;
};

#endif
